import tkinter as tk
from tkinter import ttk
from rdflib import Graph, URIRef
from rdflib.plugins.sparql import prepareQuery

# Load the ontology from file
g = Graph()
g.parse(r"C:\Users\Yara Nabil\Downloads\FinalNewRdfXml.rdf", format="xml")  # Replace with the path to your ontology file
# Dictionary mapping property URIs to display names
property_names = {
    "http://www.w3.org/1999/02/22-rdf-syntax-ns#type": "Type",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/title": "Title",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasActor": "Actor",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasDirector": "Director",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasGenre": "Genre",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasWriter": "Writer",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/year": "Year",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/country": "Country",
    "http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/language": "Language"
}
# Function to retrieve existing actors, directors, and genres from RDF
def get_existing_values(property_uri):
    query = prepareQuery(
        """
        SELECT DISTINCT ?value
        WHERE {
            ?movie rdf:type movie:Movie .
            ?movie ?property ?value .
        }
        """,
        initNs={"movie": URIRef("http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/")}
    )

    results = g.query(query, initBindings={"property": property_uri})

    values = [row["value"].split("/")[-1] for row in results if row["value"]]
    return values

# Function to retrieve movie information and display it
def display_movie_info(event):
    # Get the index of the selected movie
    index = movie_listbox.curselection()
    if index:
        index = int(index[0])
    else:
        return

    # Get the title of the selected movie
    movie_title = movie_listbox.get(index)

    # Prepare SPARQL query to get the information of the selected movie
    query = f"""
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX movie: <http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/>

    SELECT ?property ?value
    WHERE {{
        ?movie rdf:type movie:Movie .
        ?movie movie:title "{movie_title}" .
        ?movie ?property ?value .
        FILTER NOT EXISTS {{ ?property rdf:type rdf:Property }}
        FILTER (?property != <http://purl.org/dc/elements/1.1/creator> && ?property != <http://purl.org/dc/elements/1.1/date> && ?property != rdf:type && ?property != movie:title)
        FILTER (?property != movie:creator && ?property != movie:date)
    }}
    """

    # Execute the SPARQL query
    results = g.query(query)

    # Display movie information in a separate window
    info_window = tk.Toplevel()
    info_window.title(f"Information for {movie_title}")

    # Display movie title
    title_label = tk.Label(info_window, text=f"Movie Title: {movie_title}", font=("Helvetica", 14, "bold"))
    title_label.grid(row=0, column=0, columnspan=2, padx=10, pady=5)

   # Display movie properties and results
    row_num = 1
    for row in results:
        property_uri = str(row["property"])
        property_name = property_names.get(property_uri, property_uri.split("/")[-1])  # Get display name or use URI
        value = row["value"].split("/")[-1] if isinstance(row["value"], str) else row["value"]  # Extract local name
        property_label = tk.Label(info_window, text=f"{property_name}: {value}", font=("Helvetica", 12))
        property_label.grid(row=row_num, column=0, padx=10, pady=2, sticky="e")
        row_num += 1



# Function to retrieve existing movies from RDF and display their titles
def display_existing_movies():
    # Clear existing movie titles in the listbox
    movie_listbox.delete(0, tk.END)

    # Prepare SPARQL query to get all movies and their titles
    query = """
    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX movie: <http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/>

    SELECT ?title
    WHERE {
        ?movie rdf:type movie:Movie .
        ?movie movie:title ?title .
    }
    """

    # Execute the SPARQL query
    results = g.query(query)

    # Display existing movie titles
    for row in results:
        movie_listbox.insert(tk.END, row["title"])

# Function to search movies based on selected criteria
def search_movies():
    included_actor = included_actor_dropdown.get()
    excluded_actor = excluded_actor_dropdown.get()
    director = director_dropdown.get()
    genre = genre_dropdown.get()

    # Prepare SPARQL query to search for movies based on selected criteria
    query = f"""
    PREFIX movie: <http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/>

    SELECT ?title
    WHERE {{
        ?movie rdf:type movie:Movie .
        ?movie movie:title ?title .

        {f"?movie movie:hasActor movie:{included_actor} ." if included_actor else ""}
        {f"FILTER NOT EXISTS {{ ?movie movie:hasActor movie:{excluded_actor} }}" if excluded_actor else ""}
        {f"?movie movie:hasDirector movie:{director} ." if director else ""}
        {f"?movie movie:hasGenre movie:{genre} ." if genre else ""}
    }}
    """

    # Execute the SPARQL query
    results = g.query(query)

    # Display search results
    search_results_listbox.delete(0, tk.END)
    for row in results:
        search_results_listbox.insert(tk.END, row["title"])

# Create the GUI
root = tk.Tk()
root.title("Movies App")

# Existing Movies Frame
existing_movies_frame = ttk.Frame(root, padding="10")
existing_movies_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

# Search Movies Frame
search_movies_frame = ttk.Frame(root, padding="10")
search_movies_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

# Existing Movies Frame
# Heading
existing_heading_label = ttk.Label(existing_movies_frame, text="Existing Movies", font=("Helvetica", 16))
existing_heading_label.grid(row=0, column=0, padx=10, pady=10)

# Listbox to display existing movie titles
movie_listbox = tk.Listbox(existing_movies_frame, width=50, height=10, font=("Helvetica", 12))
movie_listbox.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

# Button to retrieve and display existing movie titles
display_button = ttk.Button(existing_movies_frame, text="Display Existing Movies", command=display_existing_movies)
display_button.grid(row=2, column=0, padx=10, pady=10)

# Bind click event to the listbox to display movie information
movie_listbox.bind("<<ListboxSelect>>", display_movie_info)

# Search Movies Frame
# Heading
search_heading_label = ttk.Label(search_movies_frame, text="Search Movies", font=("Helvetica", 16))
search_heading_label.grid(row=0, column=0, columnspan=2, padx=10, pady=10)

# Included Actor Dropdown
included_actor_label = ttk.Label(search_movies_frame, text="Included Actor:")
included_actor_label.grid(row=1, column=0, padx=10, pady=5, sticky="e")
included_actor_values = get_existing_values(URIRef("http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasActor"))
included_actor_dropdown = ttk.Combobox(search_movies_frame, values=included_actor_values)
included_actor_dropdown.grid(row=1, column=1, padx=10, pady=5, sticky="w")

# Excluded Actor Dropdown
excluded_actor_label = ttk.Label(search_movies_frame, text="Excluded Actor:")
excluded_actor_label.grid(row=2, column=0, padx=10, pady=5, sticky="e")
excluded_actor_dropdown = ttk.Combobox(search_movies_frame, values=included_actor_values)
excluded_actor_dropdown.grid(row=2, column=1, padx=10, pady=5, sticky="w")

# Director Dropdown
director_label = ttk.Label(search_movies_frame, text="Director:")
director_label.grid(row=3, column=0, padx=10, pady=5, sticky="e")
director_values = get_existing_values(URIRef("http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasDirector"))
director_dropdown = ttk.Combobox(search_movies_frame, values=director_values)
director_dropdown.grid(row=3, column=1, padx=10, pady=5, sticky="w")

# Genre Dropdown
genre_label = ttk.Label(search_movies_frame, text="Genre:")
genre_label.grid(row=4, column=0, padx=10, pady=5, sticky="e")
genre_values = get_existing_values(URIRef("http://www.semanticweb.org/ranaahmed/ontologies/2024/4/Movei-Project/hasGenre"))
genre_dropdown = ttk.Combobox(search_movies_frame, values=genre_values)
genre_dropdown.grid(row=4, column=1, padx=10, pady=5, sticky="w")

# Button to search movies
search_button = ttk.Button(search_movies_frame, text="Search", command=search_movies)
search_button.grid(row=5, column=0, columnspan=2, padx=10, pady=10)

# Search Results
search_results_label = ttk.Label(search_movies_frame, text="Search Results:")
search_results_label.grid(row=6, column=0, columnspan=2, padx=10, pady=5)

# Listbox to display search results
search_results_listbox = tk.Listbox(search_movies_frame, width=50, height=10, font=("Helvetica", 12))
search_results_listbox.grid(row=7, column=0, columnspan=2, padx=10, pady=5)

# Run the GUI
root.mainloop()
